
Practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000c0088  0c000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bss          000c0004  0c0c0088  0c0c0088  000c8088  2**2
                  ALLOC
  2 .text         00000490  0c18008c  0c18008c  000c808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.attributes 0000002c  00000000  00000000  000c851c  2**0
                  CONTENTS, READONLY
  4 .comment      0000003b  00000000  00000000  000c8548  2**0
                  CONTENTS, READONLY
  5 .debug_line   000004b4  00000000  00000000  000c8583  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000448  00000000  00000000  000c8a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f9  00000000  00000000  000c8e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000080  00000000  00000000  000c9078  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 00008f71  00000000  00000000  000c90f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000000bc  00000000  00000000  000d2069  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000015a  00000000  00000000  000d2125  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000b0  00000000  00000000  000d227f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000060  00000000  00000000  000d232f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000000a8  00000000  00000000  000d2390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c18008c <start>:
    .extern main
    .extern _stack
	.global start

start:
    ldr sp,=_stack
 c18008c:	e59fd008 	ldr	sp, [pc, #8]	; c18009c <End+0x4>
    mov fp,#0
 c180090:	e3a0b000 	mov	fp, #0
    
    bl main
 c180094:	eb00000f 	bl	c1800d8 <main>

0c180098 <End>:

End:
    B End
 c180098:	eafffffe 	b	c180098 <End>
 c18009c:	0c7ff000 	.word	0x0c7ff000

0c1800a0 <initRGB>:
        	imagenRGB[i*ncols+j].B = (i+j)%256;
        }
}
#else
void initRGB(int nfilas, int ncols)
{
 c1800a0:	e1a0c00d 	mov	ip, sp
 c1800a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1800a8:	e24cb004 	sub	fp, ip, #4
 c1800ac:	e24dd008 	sub	sp, sp, #8
 c1800b0:	e50b0010 	str	r0, [fp, #-16]
 c1800b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    imagenRGB = (pixelRGB*) imageLena512;
 c1800b8:	e59f2010 	ldr	r2, [pc, #16]	; c1800d0 <initRGB+0x30>
 c1800bc:	e59f3010 	ldr	r3, [pc, #16]	; c1800d4 <initRGB+0x34>
 c1800c0:	e5832000 	str	r2, [r3]
}
 c1800c4:	e24bd00c 	sub	sp, fp, #12
 c1800c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1800cc:	e12fff1e 	bx	lr
 c1800d0:	0c000000 	.word	0x0c000000
 c1800d4:	0c0c0088 	.word	0x0c0c0088

0c1800d8 <main>:
#endif


int main() {
 c1800d8:	e1a0c00d 	mov	ip, sp
 c1800dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1800e0:	e24cb004 	sub	fp, ip, #4
    initRGB(N,M);
 c1800e4:	e3a00c02 	mov	r0, #512	; 0x200
 c1800e8:	e3a01c02 	mov	r1, #512	; 0x200
 c1800ec:	ebffffeb 	bl	c1800a0 <initRGB>
    RGB2GrayMatrix(imagenRGB, imagenGris,N,M);
 c1800f0:	e59f3050 	ldr	r3, [pc, #80]	; c180148 <main+0x70>
 c1800f4:	e5933000 	ldr	r3, [r3]
 c1800f8:	e1a00003 	mov	r0, r3
 c1800fc:	e59f1048 	ldr	r1, [pc, #72]	; c18014c <main+0x74>
 c180100:	e3a02c02 	mov	r2, #512	; 0x200
 c180104:	e3a03c02 	mov	r3, #512	; 0x200
 c180108:	eb000040 	bl	c180210 <RGB2GrayMatrix>
    apply_gaussian(imagenGris, imagenGauss, N, M);
 c18010c:	e59f0038 	ldr	r0, [pc, #56]	; c18014c <main+0x74>
 c180110:	e59f1038 	ldr	r1, [pc, #56]	; c180150 <main+0x78>
 c180114:	e3a02c02 	mov	r2, #512	; 0x200
 c180118:	e3a03c02 	mov	r3, #512	; 0x200
 c18011c:	eb00001e 	bl	c18019c <apply_gaussian>
    apply_sobel(imagenGauss, imagenSobel, N, M);
 c180120:	e59f0028 	ldr	r0, [pc, #40]	; c180150 <main+0x78>
 c180124:	e59f1028 	ldr	r1, [pc, #40]	; c180154 <main+0x7c>
 c180128:	e3a02c02 	mov	r2, #512	; 0x200
 c18012c:	e3a03c02 	mov	r3, #512	; 0x200
 c180130:	eb00006b 	bl	c1802e4 <apply_sobel>


    return 0;
 c180134:	e3a03000 	mov	r3, #0
}
 c180138:	e1a00003 	mov	r0, r3
 c18013c:	e24bd00c 	sub	sp, fp, #12
 c180140:	e89d6800 	ldm	sp, {fp, sp, lr}
 c180144:	e12fff1e 	bx	lr
 c180148:	0c0c0088 	.word	0x0c0c0088
 c18014c:	0c14008c 	.word	0x0c14008c
 c180150:	0c0c008c 	.word	0x0c0c008c
 c180154:	0c10008c 	.word	0x0c10008c

0c180158 <rgb2gray>:
	.global rgb2gray
	.global div16384
	.global apply_gaussian

rgb2gray:
		push {r4-r6, lr}
 c180158:	e92d4070 	push	{r4, r5, r6, lr}
		ldrb r1,[r0]
 c18015c:	e5d01000 	ldrb	r1, [r0]
		ldrb r2,[r0,#1]
 c180160:	e5d02001 	ldrb	r2, [r0, #1]
		ldrb r3,[r0,#2]
 c180164:	e5d03002 	ldrb	r3, [r0, #2]
		ldr r4,=COEF1
 c180168:	e59f4094 	ldr	r4, [pc, #148]	; c180204 <finfor1+0x8>
		ldr r5,=COEF2
 c18016c:	e59f5094 	ldr	r5, [pc, #148]	; c180208 <finfor1+0xc>
		ldr r6,=COEF3
 c180170:	e59f6094 	ldr	r6, [pc, #148]	; c18020c <finfor1+0x10>
		mul r4,r1,r4
 c180174:	e0040491 	mul	r4, r1, r4
		mul r5,r2,r5
 c180178:	e0050592 	mul	r5, r2, r5
		mul r6,r3,r6
 c18017c:	e0060693 	mul	r6, r3, r6
		add r0,r4,r5
 c180180:	e0840005 	add	r0, r4, r5
		add r0,r0,r6
 c180184:	e0800006 	add	r0, r0, r6
		bl div16384
 c180188:	eb000001 	bl	c180194 <div16384>
		pop {r4-r6, lr}
 c18018c:	e8bd4070 	pop	{r4, r5, r6, lr}
		mov pc,lr
 c180190:	e1a0f00e 	mov	pc, lr

0c180194 <div16384>:


div16384:
		lsr r0,r0,#14
 c180194:	e1a00720 	lsr	r0, r0, #14
		mov pc,lr
 c180198:	e1a0f00e 	mov	pc, lr

0c18019c <apply_gaussian>:



apply_gaussian:
		push {r4-r8, lr}
 c18019c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
		mov r5,#0			//i
 c1801a0:	e3a05000 	mov	r5, #0

0c1801a4 <for1>:
	for1:
		cmp r5,r3				//comparo
 c1801a4:	e1550003 	cmp	r5, r3
		bge finfor1
 c1801a8:	aa000013 	bge	c1801fc <finfor1>
		mov r6,#0				//j
 c1801ac:	e3a06000 	mov	r6, #0

0c1801b0 <for2>:
	for2:
		cmp r6,r2				//comparo
 c1801b0:	e1560002 	cmp	r6, r2
		bge finfor2
 c1801b4:	aa00000e 	bge	c1801f4 <finfor2>
		push {r0-r3}			//guardamos la entrada de apply_gaussian
 c1801b8:	e92d000f 	push	{r0, r1, r2, r3}
		mov r1,r2
 c1801bc:	e1a01002 	mov	r1, r2
		mov r2,r3
 c1801c0:	e1a02003 	mov	r2, r3
		mov r3,r5
 c1801c4:	e1a03005 	mov	r3, r5
		mov r4,r6
 c1801c8:	e1a04006 	mov	r4, r6
		push {r4}
 c1801cc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
		bl gaussian
 c1801d0:	eb000073 	bl	c1803a4 <gaussian>
		add sp,sp,#4
 c1801d4:	e28dd004 	add	sp, sp, #4
		mov r7, r0 				//devolicion
 c1801d8:	e1a07000 	mov	r7, r0
		pop {r0-r3}
 c1801dc:	e8bd000f 	pop	{r0, r1, r2, r3}
		mul r8,r5,r2			// i*weight
 c1801e0:	e0080295 	mul	r8, r5, r2
		add r8,r8,r6			// i*weight + j
 c1801e4:	e0888006 	add	r8, r8, r6
		strb r7,[r1,r8]			//Guardamos en img2
 c1801e8:	e7c17008 	strb	r7, [r1, r8]
		add r6, r6,#1
 c1801ec:	e2866001 	add	r6, r6, #1
		b for2
 c1801f0:	eaffffee 	b	c1801b0 <for2>

0c1801f4 <finfor2>:
	finfor2:
		add r5,r5,#1
 c1801f4:	e2855001 	add	r5, r5, #1
		b for1
 c1801f8:	eaffffe9 	b	c1801a4 <for1>

0c1801fc <finfor1>:
	finfor1:
		pop {r4-r8, lr}
 c1801fc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
		mov pc,lr
 c180200:	e1a0f00e 	mov	pc, lr
 c180204:	00000d9b 	.word	0x00000d9b
 c180208:	00002dc6 	.word	0x00002dc6
 c18020c:	0000049f 	.word	0x0000049f

0c180210 <RGB2GrayMatrix>:
	char resultado = (3483*pixel->R + 11718*pixel->G + 1183*pixel->B) /16384;

	return resultado;
}*/

void RGB2GrayMatrix(pixelRGB orig[], unsigned char dest[], int nfilas, int ncols) {
 c180210:	e1a0c00d 	mov	ip, sp
 c180214:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c180218:	e24cb004 	sub	fp, ip, #4
 c18021c:	e24dd01c 	sub	sp, sp, #28
 c180220:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c180224:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c180228:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 c18022c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    int i,j;

    for (i=0;i<nfilas;i++)
 c180230:	e3a03000 	mov	r3, #0
 c180234:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c180238:	ea000022 	b	c1802c8 <RGB2GrayMatrix+0xb8>
        for (j=0; j<ncols; j++)
 c18023c:	e3a03000 	mov	r3, #0
 c180240:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c180244:	ea000018 	b	c1802ac <RGB2GrayMatrix+0x9c>
            dest[i*ncols+j] =  rgb2gray(&orig[i*ncols+j]);
 c180248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c18024c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 c180250:	e0020293 	mul	r2, r3, r2
 c180254:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c180258:	e0823003 	add	r3, r2, r3
 c18025c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
 c180260:	e0824003 	add	r4, r2, r3
 c180264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c180268:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 c18026c:	e0020293 	mul	r2, r3, r2
 c180270:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c180274:	e0823003 	add	r3, r2, r3
 c180278:	e1a02003 	mov	r2, r3
 c18027c:	e1a03002 	mov	r3, r2
 c180280:	e1a03083 	lsl	r3, r3, #1
 c180284:	e0833002 	add	r3, r3, r2
 c180288:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c18028c:	e0823003 	add	r3, r2, r3
 c180290:	e1a00003 	mov	r0, r3
 c180294:	ebffffaf 	bl	c180158 <rgb2gray>
 c180298:	e1a03000 	mov	r3, r0
 c18029c:	e5c43000 	strb	r3, [r4]

void RGB2GrayMatrix(pixelRGB orig[], unsigned char dest[], int nfilas, int ncols) {
    int i,j;

    for (i=0;i<nfilas;i++)
        for (j=0; j<ncols; j++)
 c1802a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1802a4:	e2833001 	add	r3, r3, #1
 c1802a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c1802ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c1802b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c1802b4:	e1520003 	cmp	r2, r3
 c1802b8:	baffffe2 	blt	c180248 <RGB2GrayMatrix+0x38>
}*/

void RGB2GrayMatrix(pixelRGB orig[], unsigned char dest[], int nfilas, int ncols) {
    int i,j;

    for (i=0;i<nfilas;i++)
 c1802bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1802c0:	e2833001 	add	r3, r3, #1
 c1802c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1802c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1802cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1802d0:	e1520003 	cmp	r2, r3
 c1802d4:	baffffd8 	blt	c18023c <RGB2GrayMatrix+0x2c>
        for (j=0; j<ncols; j++)
            dest[i*ncols+j] =  rgb2gray(&orig[i*ncols+j]);

}
 c1802d8:	e24bd010 	sub	sp, fp, #16
 c1802dc:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1802e0:	e12fff1e 	bx	lr

0c1802e4 <apply_sobel>:
		}
	}
}
*/
void apply_sobel(unsigned char im1[], unsigned char im2[], int width, int height)
{
 c1802e4:	e1a0c00d 	mov	ip, sp
 c1802e8:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1802ec:	e24cb004 	sub	fp, ip, #4
 c1802f0:	e24dd024 	sub	sp, sp, #36	; 0x24
 c1802f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c1802f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c1802fc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 c180300:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

int i,j;
		for(i=0;i<height;i++){
 c180304:	e3a03000 	mov	r3, #0
 c180308:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c18030c:	ea00001d 	b	c180388 <apply_sobel+0xa4>
			for(j=0;j<width;j++){
 c180310:	e3a03000 	mov	r3, #0
 c180314:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c180318:	ea000013 	b	c18036c <apply_sobel+0x88>
				im2[i*width+j]=sobel (im1,width,height,i,j);
 c18031c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c180320:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c180324:	e0020293 	mul	r2, r3, r2
 c180328:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c18032c:	e0823003 	add	r3, r2, r3
 c180330:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
 c180334:	e0824003 	add	r4, r2, r3
 c180338:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c18033c:	e58d3000 	str	r3, [sp]
 c180340:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c180344:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c180348:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 c18034c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c180350:	eb000040 	bl	c180458 <sobel>
 c180354:	e1a03000 	mov	r3, r0
 c180358:	e20330ff 	and	r3, r3, #255	; 0xff
 c18035c:	e5c43000 	strb	r3, [r4]
void apply_sobel(unsigned char im1[], unsigned char im2[], int width, int height)
{

int i,j;
		for(i=0;i<height;i++){
			for(j=0;j<width;j++){
 c180360:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c180364:	e2833001 	add	r3, r3, #1
 c180368:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c18036c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c180370:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c180374:	e1520003 	cmp	r2, r3
 c180378:	baffffe7 	blt	c18031c <apply_sobel+0x38>
*/
void apply_sobel(unsigned char im1[], unsigned char im2[], int width, int height)
{

int i,j;
		for(i=0;i<height;i++){
 c18037c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c180380:	e2833001 	add	r3, r3, #1
 c180384:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c180388:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c18038c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c180390:	e1520003 	cmp	r2, r3
 c180394:	baffffdd 	blt	c180310 <apply_sobel+0x2c>
			for(j=0;j<width;j++){
				im2[i*width+j]=sobel (im1,width,height,i,j);
			}
		}
}
 c180398:	e24bd010 	sub	sp, fp, #16
 c18039c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1803a0:	e12fff1e 	bx	lr

0c1803a4 <gaussian>:
 c1803a4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
 c1803a8:	e3530001 	cmp	r3, #1
 c1803ac:	e59dc014 	ldr	ip, [sp, #20]
 c1803b0:	da000022 	ble	c180440 <gaussian+0x9c>
 c1803b4:	e2422002 	sub	r2, r2, #2
 c1803b8:	e1530002 	cmp	r3, r2
 c1803bc:	aa00001f 	bge	c180440 <gaussian+0x9c>
 c1803c0:	e35c0001 	cmp	ip, #1
 c1803c4:	da00001d 	ble	c180440 <gaussian+0x9c>
 c1803c8:	e2412002 	sub	r2, r1, #2
 c1803cc:	e15c0002 	cmp	ip, r2
 c1803d0:	aa00001a 	bge	c180440 <gaussian+0x9c>
 c1803d4:	e2433002 	sub	r3, r3, #2
 c1803d8:	e02cc391 	mla	ip, r1, r3, ip
 c1803dc:	e3a07000 	mov	r7, #0
 c1803e0:	e59f8068 	ldr	r8, [pc, #104]	; c180450 <gaussian+0xac>
 c1803e4:	e080000c 	add	r0, r0, ip
 c1803e8:	e1a0c007 	mov	ip, r7
 c1803ec:	e0872107 	add	r2, r7, r7, lsl #2
 c1803f0:	e0882102 	add	r2, r8, r2, lsl #2
 c1803f4:	e2422004 	sub	r2, r2, #4
 c1803f8:	e2806005 	add	r6, r0, #5
 c1803fc:	e1a03000 	mov	r3, r0
 c180400:	e5534002 	ldrb	r4, [r3, #-2]
 c180404:	e5b25004 	ldr	r5, [r2, #4]!
 c180408:	e2833001 	add	r3, r3, #1
 c18040c:	e1530006 	cmp	r3, r6
 c180410:	e02cc495 	mla	ip, r5, r4, ip
 c180414:	1afffff9 	bne	c180400 <gaussian+0x5c>
 c180418:	e2877001 	add	r7, r7, #1
 c18041c:	e3570005 	cmp	r7, #5
 c180420:	e0800001 	add	r0, r0, r1
 c180424:	1afffff0 	bne	c1803ec <gaussian+0x48>
 c180428:	e59f3024 	ldr	r3, [pc, #36]	; c180454 <gaussian+0xb0>
 c18042c:	e083239c 	umull	r2, r3, ip, r3
 c180430:	e063c00c 	rsb	ip, r3, ip
 c180434:	e08330ac 	add	r3, r3, ip, lsr #1
 c180438:	e1a00423 	lsr	r0, r3, #8
 c18043c:	ea000001 	b	c180448 <gaussian+0xa4>
 c180440:	e0200391 	mla	r0, r1, r3, r0
 c180444:	e7d0000c 	ldrb	r0, [r0, ip]
 c180448:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
 c18044c:	e12fff1e 	bx	lr
 c180450:	0c0c0000 	.word	0x0c0c0000
 c180454:	e01e01e1 	.word	0xe01e01e1

0c180458 <sobel>:
 c180458:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
 c18045c:	e3530000 	cmp	r3, #0
 c180460:	e59dc020 	ldr	ip, [sp, #32]
 c180464:	da000027 	ble	c180508 <sobel+0xb0>
 c180468:	e2422001 	sub	r2, r2, #1
 c18046c:	e1530002 	cmp	r3, r2
 c180470:	aa000024 	bge	c180508 <sobel+0xb0>
 c180474:	e35c0000 	cmp	ip, #0
 c180478:	da000022 	ble	c180508 <sobel+0xb0>
 c18047c:	e2412001 	sub	r2, r1, #1
 c180480:	e15c0002 	cmp	ip, r2
 c180484:	aa00001f 	bge	c180508 <sobel+0xb0>
 c180488:	e2433001 	sub	r3, r3, #1
 c18048c:	e02cc391 	mla	ip, r1, r3, ip
 c180490:	e3a05000 	mov	r5, #0
 c180494:	e24cc001 	sub	ip, ip, #1
 c180498:	e59fb074 	ldr	fp, [pc, #116]	; c180514 <sobel+0xbc>
 c18049c:	e080000c 	add	r0, r0, ip
 c1804a0:	e1a06005 	mov	r6, r5
 c1804a4:	e1a07005 	mov	r7, r5
 c1804a8:	e0854085 	add	r4, r5, r5, lsl #1
 c1804ac:	e08b4104 	add	r4, fp, r4, lsl #2
 c1804b0:	e2444004 	sub	r4, r4, #4
 c1804b4:	e08b9105 	add	r9, fp, r5, lsl #2
 c1804b8:	e1a0c000 	mov	ip, r0
 c1804bc:	e3a03000 	mov	r3, #0
 c1804c0:	e4dc2001 	ldrb	r2, [ip], #1
 c1804c4:	e7998003 	ldr	r8, [r9, r3]
 c1804c8:	e5b4a004 	ldr	sl, [r4, #4]!
 c1804cc:	e283300c 	add	r3, r3, #12
 c1804d0:	e3530024 	cmp	r3, #36	; 0x24
 c1804d4:	e027729a 	mla	r7, sl, r2, r7
 c1804d8:	e0266298 	mla	r6, r8, r2, r6
 c1804dc:	1afffff7 	bne	c1804c0 <sobel+0x68>
 c1804e0:	e2855001 	add	r5, r5, #1
 c1804e4:	e3550003 	cmp	r5, #3
 c1804e8:	e0800001 	add	r0, r0, r1
 c1804ec:	1affffed 	bne	c1804a8 <sobel+0x50>
 c1804f0:	e3570000 	cmp	r7, #0
 c1804f4:	b2677000 	rsblt	r7, r7, #0
 c1804f8:	e3560000 	cmp	r6, #0
 c1804fc:	b2666000 	rsblt	r6, r6, #0
 c180500:	e0870006 	add	r0, r7, r6
 c180504:	ea000000 	b	c18050c <sobel+0xb4>
 c180508:	e3a00000 	mov	r0, #0
 c18050c:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
 c180510:	e12fff1e 	bx	lr
 c180514:	0c0c0064 	.word	0x0c0c0064

0c180518 <non_max_sup>:
 c180518:	e12fff1e 	bx	lr
