   1              	# 1 "../init.S"
   1              	/*-----------------------------------------------------------------
   0              	
   0              	
   0              	
   2              	**
   3              	**  Fichero:
   4              	**    init.asm
   5              	**
   6              	**    Estructura de Computadores
   7              	**    Dpto. de Arquitectura de Computadores y Automï¿½tica
   8              	**    Facultad de Informï¿½tica. Universidad Complutense de Madrid
   9              	**
  10              	**  Propï¿½sito:
  11              	**    Arranca un programa en C
  12              	**
  13              	**  Notas de diseï¿½o:
  14              	**
  15              	**---------------------------------------------------------------*/
  16              	
  17              	   .extern main
  18              		.global start
  19              		.extern button_ISR
  20              		.extern timer_ISR
  21              		
  22              		/* Etiquetas que se usan para inicializar la Tabla de direcciones */
  23              		.equ _ISR_STARTADDRESS, 0xc7fff00
  24              		.equ HandleIRQ, _ISR_STARTADDRESS+4*6
  25              	
  26              		/* Constantes utiles para la rutina ISR_IRQ */
  27              		.equ I_ISPR, 0x01E00020
  28              		.equ I_ISPC, 0x01E00024
  29              	
  30              		/*
  31              		** Modos de operación
  32              		*/
  33              		.equ MODEMASK, 0x1f		/* Para selección de M[4:0] del CPSR */
  34              		.equ USRMODE,  0x10
  35              		.equ FIQMODE,  0x11
  36              		.equ IRQMODE,  0x12
  37              		.equ SVCMODE,  0x13
  38              		.equ ABTMODE,  0x17
  39              		.equ UNDMODE,  0x1b
  40              		.equ SYSMODE,  0x1f
  41              	
  42              		/*
  43              		** Direcciones de las bases de las pilas del sistema 
  44              		*/
  45              		.equ USRSTACK, 0xc7ff000   	
  46              		.equ SVCSTACK, 0xc7ff100
  47              		.equ UNDSTACK, 0xc7ff200
  48              		.equ ABTSTACK, 0xc7ff300
  49              		.equ IRQSTACK, 0xc7ff400
  50              		.equ FIQSTACK, 0xc7ff500
  51              	
  52              		/*
  53              		** Registros del controlador de interrupciones para enmascarar y eliminar interrupciones pendiente
  54              		*/
  55              		.equ rINTMSK,    0x1e0000c
  56              		.equ rI_ISPC,    0x1e00024
  57              		.equ rF_ISPC,    0x1e0003c
  58              	
  59              		/*
  60              		** Registro del puerto G  para eliminar interrupciones pendientes
  61              		*/
  62              		.equ rEXTINTPND, 0x1d20054
  63              	
  64              	start:
  65              	
  66              	
  67              		/* 1- Pasar a modo supervisor */
  68 0000 00000FE1 	    mrs	r0, cpsr
  69 0004 1F00C0E3 	    bic	r0, r0, #MODEMASK
  70 0008 131080E3 	    orr	r1, r0, #SVCMODE
  71 000c 01F021E1 	    msr	cpsr_c, r1 
  72              	
  73              	/* Inicialización de la sección bss a 0, estándar C */
  74 0010 28319FE5 	    ldr	    r3, =Image_ZI_Base
  75 0014 28119FE5 		ldr	    r1, =Image_ZI_Limit	/* Top of zero init segment */
  76 0018 0020A0E3 	    mov	    r2, #0
  77              	L0:
  78 001c 010053E1 	    cmp	    r3, r1	    		/* Zero init */
  79 0020 04208334 	    strcc   r2, [r3], #4
  80 0024 FCFFFF3A 	    bcc	    L0
  81              		/****************************************************/
  82              	
  83              		/* 2- Desde modo SVC inicializar los SP de todos los modos de ejecución privilegiados */
  84 0028 190000EB 	    bl InitStacks
  85              	
  86              	
  87              	
  88              		/*3- En el controlador de interrupciones, enmascarar interrupciones */
  89 002c 14019FE5 		ldr r0, =rINTMSK
  90 0030 0E12E0E3 		ldr r1, =0x1fffffff
  91 0034 001080E5 	    str r1, [r0]
  92              	
  93              		/*4- Habilitar linea IRQ y FIQ del procesador (registro de estado CPSR) */
  94 0038 00000FE1 		mrs r0, cpsr
  95 003c C000C0E3 		bic r0, r0, #0xC0
  96 0040 00F021E1 		msr cpsr_c, r0
  97              		
  98              		/*5- Inicializar la tabla de direcciones */
  99              		/* Añadir la dirección de la subrutina irq_ISR en la tabla de direcciones */
 100 0044 00019FE5 		ldr r0,=irq_ISR
 101 0048 00119FE5 		ldr r1,=HandleIRQ
 102 004c 000081E5 		str r0,[r1]
 103              	
 104              	    /*6- Eliminar posibles interrupciones pendientes */
 105 0050 FC009FE5 		ldr r0, =rEXTINTPND
 106 0054 FF10A0E3 		ldr r1, =0xff
 107 0058 001080E5 		str r1, [r0]
 108 005c F4009FE5 		ldr r0, =rI_ISPC
 109 0060 0E12E0E3 		ldr r1, =0x1fffffff
 110 0064 001080E5 		str r1, [r0]
 111 0068 EC009FE5 		ldr r0, =rF_ISPC
 112 006c 0E12E0E3 		ldr r1, =0x1fffffff
 113 0070 001080E5 		str r1, [r0]
 114              	
 115              	
 116              		/* Desde modo SVC cambia a modo USR e inicializa el SP_usr */
 117 0074 00000FE1 		mrs r0, cpsr
 118 0078 1F00C0E3 		bic r0, r0, #MODEMASK
 119 007c 101080E3 		orr r1, r0, #USRMODE  
 120 0080 01F021E1 		msr cpsr_c, r1
 121 0084 D4D09FE5 		ldr sp, =USRSTACK
 122              	
 123 0088 00B0A0E3 	    mov fp, #0
 124              	
 125              		/* Saltar al main */
 126 008c FEFFFFEB 	    bl main
 127              	
 128              	End:
 129 0090 FEFFFFEA 	    B End
 130              	
 131              	InitStacks:
 132 0094 00000FE1 		mrs r0, cpsr
 133 0098 1F00C0E3 		bic r0, r0, #MODEMASK
 134              	
 135 009c 1B1080E3 		orr r1, r0, #UNDMODE  /* desde modo SVC cambia a modo UND e inicializa el SP_und */
 136 00a0 01F021E1 		msr cpsr_c, r1    
 137 00a4 B8D09FE5 		ldr sp, =UNDSTACK
 138              	
 139 00a8 171080E3 		orr r1, r0, #ABTMODE  /* desde modo UND cambia a modo ABT e inicializa el SP_abt */
 140 00ac 01F021E1 		msr cpsr_c, r1 
 141 00b0 B0D09FE5 		ldr sp, =ABTSTACK
 142              	
 143 00b4 121080E3 		orr r1, r0, #IRQMODE  /* desde modo ABT cambia a modo IRQ e inicializa el SP_abt */
 144 00b8 01F021E1 		msr cpsr_c, r1
 145 00bc A8D09FE5 		ldr sp, =IRQSTACK
 146              	
 147 00c0 111080E3 		orr r1, r0, #FIQMODE  /* desde modo IRQ cambia a modo FIQ e inicializa el SP_fiq */
 148 00c4 01F021E1 		msr cpsr_c, r1
 149 00c8 A0D09FE5 		ldr sp, =FIQSTACK
 150              	
 151 00cc 131080E3 		orr r1, r0, #SVCMODE  /* desde modo FIQ cambia a modo SVC e inicializa el SP_svc */
 152 00d0 01F021E1 		msr cpsr_c, r1
 153 00d4 98D09FE5 		ldr sp, =SVCSTACK
 154              		
 155 00d8 0EF0A0E1 	    mov pc, lr
 156              	
 157              	//irq_ISR:
 158              		//COMPLETAR: debemos ver si la interrupción que debemos atender es la
 159              		//de la línea INT_TIMER0 and INT_EINT4567. Si es la del timer se invocará la
 160              		//función timer_ISR y después se borrará el flag de interrupción utilizando
 161              		//el interfaz definido en intcontroller.h. Si es la de EINT4567 se invocará
 162              		//la función button_ISR y se borrará el flag correspondiente utilizando el
 163              		//mismo interfaz.
 164              		//Recordad que en el prólogo hay que guardar todos los registros usados + lr si es no hoja*/
 165              		//Antes de la llamada a otra función hay que guardar los registros de R0 a R3
 166              	
 167 00dc 1F402DE9 	irq_ISR: 	push {r0-r4,lr}
 168 00e0 90009FE5 				ldr r0,=I_ISPR
 169 00e4 000090E5 				ldr r0,[r0]
 170 00e8 8C109FE5 				ldr r1,=0x0202000
 171 00ec 011000E0 				and r1,r0,r1
 172 00f0 60009FE5 				ldr r0,=I_ISPC
 173 00f4 004090E5 				ldr r4,[r0]
 174 00f8 0226A0E3 				ldr r2,=0x0200000
 175 00fc 023AA0E3 				ldr r3,=0x0002000
 176 0100 020051E1 				cmp r1,r2
 177 0104 0400001A 				bne ver_timer
 178 0108 0F002DE9 				push {r0-r3}
 179 010c FEFFFFEB 				bl button_ISR
 180 0110 0F00BDE8 				pop {r0-r3}
 181 0114 024084E1 				orr r4,r4,r2
 182 0118 004080E5 				str r4,[r0]
 183              	ver_timer:
 184 011c 030051E1 				cmp r1,r3
 185 0120 0400001A 				bne Fin_irq
 186 0124 0F002DE9 				push {r0-r3}
 187 0128 FEFFFFEB 				bl timer_ISR
 188 012c 0F00BDE8 				pop {r0-r3}
 189 0130 034084E1 				orr r4,r4,r3
 190 0134 004080E5 				str r4,[r0]
 191 0138 1F40BDE8 	Fin_irq:	pop {r0-r4,lr}
 192 013c 04F05EE2 				subs pc,lr,#4
 193              	
 194              	
 195              	
 196 0140 00000000 		.end
 196      00000000 
 196      0C00E001 
 196      DC000000 
 196      18FF7F0C 
DEFINED SYMBOLS
           ../init.S:64     .text:00000000 start
           ../init.S:23     *ABS*:0c7fff00 _ISR_STARTADDRESS
           ../init.S:24     *ABS*:0c7fff18 HandleIRQ
           ../init.S:27     *ABS*:01e00020 I_ISPR
           ../init.S:28     *ABS*:01e00024 I_ISPC
           ../init.S:33     *ABS*:0000001f MODEMASK
           ../init.S:34     *ABS*:00000010 USRMODE
           ../init.S:35     *ABS*:00000011 FIQMODE
           ../init.S:36     *ABS*:00000012 IRQMODE
           ../init.S:37     *ABS*:00000013 SVCMODE
           ../init.S:38     *ABS*:00000017 ABTMODE
           ../init.S:39     *ABS*:0000001b UNDMODE
           ../init.S:40     *ABS*:0000001f SYSMODE
           ../init.S:45     *ABS*:0c7ff000 USRSTACK
           ../init.S:46     *ABS*:0c7ff100 SVCSTACK
           ../init.S:47     *ABS*:0c7ff200 UNDSTACK
           ../init.S:48     *ABS*:0c7ff300 ABTSTACK
           ../init.S:49     *ABS*:0c7ff400 IRQSTACK
           ../init.S:50     *ABS*:0c7ff500 FIQSTACK
           ../init.S:55     *ABS*:01e0000c rINTMSK
           ../init.S:56     *ABS*:01e00024 rI_ISPC
           ../init.S:57     *ABS*:01e0003c rF_ISPC
           ../init.S:62     *ABS*:01d20054 rEXTINTPND
           ../init.S:68     .text:00000000 $a
           ../init.S:77     .text:0000001c L0
           ../init.S:131    .text:00000094 InitStacks
           ../init.S:167    .text:000000dc irq_ISR
           ../init.S:128    .text:00000090 End
           ../init.S:183    .text:0000011c ver_timer
           ../init.S:191    .text:00000138 Fin_irq
           ../init.S:196    .text:00000140 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
Image_ZI_Base
Image_ZI_Limit
main
button_ISR
timer_ISR
