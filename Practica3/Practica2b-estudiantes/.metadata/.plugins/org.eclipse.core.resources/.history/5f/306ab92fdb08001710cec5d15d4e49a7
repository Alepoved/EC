#include <stdio.h>
#include "44b.h"
#include "button.h"
#include "leds.h"
#include "utils.h"
#include "D8Led.h"
#include "intcontroller.h"
#include "timer.h"
#include "gpio.h"

struct RLstat {
	int moving;
	int speed;
	int direction;
	int position;
};

static struct RLstat RL = {
	.moving = 0,
	.speed = 5,
	.direction = 0,
	.position = 0,
};

/*void irq_ISR(void) __attribute__ ((interrupt ("IRQ")));*/

void timer_ISR(void)
{
	//COMPLETAR: cada vez que el TIMER0 interrumpe el led rotante se mueve
	// si el giro es horario position se incrementa si su valor es <5 si no escribe un 0
	// si el giro es antihorario position se decrementa si su valor es >0 si no se escribe un 5
	if(RL.direction){
		if(RL.position==5)
			RL.position=0;
		else
			RL.position++;
	}
	else{
		if(RL.position==0)
			RL.position=5;
		else
			RL.position--;
	}

	D8Led_segment(RL.position);
}

void button_ISR(void)
{
	unsigned int whichint = rEXTINTPND;
	unsigned int buttons = (whichint >> 2) & 0x3;

	//COMPLETAR: BUT1 cambia el estado de LED1 y cambia dirección de
	//movimiento del led rotante
	if(buttons & BUT1){
		led1_switch();
		if(RL.direction==0)
			RL.direction=1;
		else
			RL.direction=0;
	}

	//COMPLETAR: BUT2 cambia el estado de LED2
	//activa movimiento de led rotante si parado
	//o lo para si está en movimiento (actuar sobre rutinas del TIMER)
	if(buttons & BUT2){
			led2_switch();
			if(RL.moving==0){
				RL.moving=1;
				tmr_update(TIMER0);
				tmr_start(TIMER0);
			}
			else{
				RL.moving=0;
				tmr_stop(TIMER0);
			}
		}

	// eliminamos rebotes
	Delay(2000);
	// borramos el flag en extintpnd
	rEXTINTPND |=0xc; //COMPLETAR: debemos borrar las peticiones de interrupción en
		         //EXTINTPND correspondientes a los pulsadores pulsados

}

/*void irq_ISR(void)
{
	int bit = rI_ISPR;

	//COMPLETAR: debemos ver si la interrupción que debemos atender (bit) es la
	//de la línea INT_TIMER0 and INT_EINT4567. Si es la del timer se invocará la
	//función timer_ISR y después se borrará el flag de interrupción utilizando
	//el interfaz definido en intcontroller.h. Si es la de EINT4567 se invocará
	//la función button_ISR y se borrará el flag correspondiente utilizando el
	//mismo interfaz.

	if(bit==0x0002000){
		timer_ISR();
		ic_cleanflag(INT_TIMER0);
	}
	else if(bit==0x0200000){
			button_ISR();
			ic_cleanflag(INT_EINT4567);
		}
}*/

int setup(void)
{
	leds_init();
	D8Led_init();
	D8Led_segment(RL.position);

	/* Port G:*/
	//COMPLETAR: utilizando el interfaz para el puerto G definido en gpio.h
	//		configurar los pines 6 y 7 del puerto G para poder generar interrupciones
	//		configurar que las interrupciones generadas por los pines 6 y 7 sean por flanco de bajada
	//		activar las correspondientes resistencias de pull-up.

	portG_conf(6, EINT);
	portG_conf(7, EINT);
	portG_eint_trig(6, FALLING);
	portG_eint_trig(7, FALLING);
	portG_conf_pup(6, ENABLE);
	portG_conf_pup(7, ENABLE);

	/********************************************************************/

	/* Configuracion del timer */

	//COMPLETAR: utilizando el interfaz para los timers definido en timer.h
	//		configurar el timer 0:
	//      valor de prescalado a 255
	//      valor del divisor 1/8
	//      valor de cuenta 62500 y cualquier valor de comparacion entre 1 y 62499
	//      actualizar el contador con estos valores (update)
	//      poner el contador en modo RELOAD
	//      dejar el contador parado

	tmr_set_prescaler(0,255);
	tmr_set_divider(0, D1_8);
	tmr_set_count(TIMER0, 62500, 60000);
	tmr_update(TIMER0);
	tmr_set_mode(TIMER0, RELOAD);
	tmr_stop(TIMER0);

	if (RL.moving)
		tmr_start(TIMER0);
	/***************************/

	// Registramos la ISR
	//	pISR_IRQ = (unsigned)irq_ISR;//COMPLETAR: registrar irq_ISR como rutina de tratamiento de
	//interrupción para la linea IRQ



	/* Configuración del controlador de interrupciones */

	ic_init();
	//COMPLETAR: utilizando el interfaz definido en intcontroller.h
	//		habilitar la línea IRQ en modo no vectorizado
	//		deshabilitar la línea FIQ
	//		configurar la línea INT_TIMER0 en modo IRQ
	//		configurar la línea INT_EINT4567 en modo IRQ
	//		habilitar la línea INT_TIMER0
	//		habilitar la línea INT_EINT4567
	ic_conf_irq(ENABLE, NOVEC);
	ic_conf_fiq(DISABLE);
	ic_conf_line(INT_TIMER0, IRQ);
	ic_conf_line(INT_EINT4567, IRQ);
	ic_enable(INT_TIMER0);
	ic_enable(INT_EINT4567);

	/***************************************************/

	Delay(0);
	return 0;
}



int main(void)
{
	setup();

	while (1) {

	}
}
