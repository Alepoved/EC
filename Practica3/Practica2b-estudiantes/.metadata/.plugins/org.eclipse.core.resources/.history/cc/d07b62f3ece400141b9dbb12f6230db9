/*-------------------------------------------------------------------
**
**  Fichero:
**    timer.c  10/6/2014
**
**    Estructura de Computadores
**    Dpto. de Arquitectura de Computadores y Automática
**    Facultad de Informática. Universidad Complutense de Madrid
**
**  Propósito:
**    Contiene las implementaciones de las funciones
**    para la gestión del timer 0 del chip S3C44BOX
**
**  Notas de diseño:
**
**-----------------------------------------------------------------*/

#include "44b.h"
#include "leds.h"
#include "D8Led.h"
#include "timer.h"

#define MCLK 64000000

static int symbol = 0;     /* variable de estado del símbolo del contador software */
static int timer_stat = 0; /* variable de estado del timer (1 activo, 0 inactivo)   */

static void timer_ISR(void) __attribute__ ((interrupt ("IRQ")));

static void timer_ISR(void)
{
	if(symbol<9){
			symbol++;
		}
		D8Led_digit(symbol);
		leds_switch();
		rI_ISPC=BIT_TIMER2;


}

void timer_start(void)
{
	//Implementar
		rTCNTB2=62500;
	    /* manual update */
	rTCON=(0x1 <<13);
		/* Se borra el bit de interrupción pendiente del TIMER2 */
	rI_ISPC=(0x1 << 11);
		/* not manual update, start and auto-reload*/
		rTCON=(0x9 <<12);
		/* Se borra el bit de interrupción pendiente del TIMER2 */
		rI_ISPC=(0x1 << 11);
		timer_stat = 1;

		/* Desenmascara la linea del timer 2 y el bit global */
		rINTMSK= rINTMSK & ~(BIT_GLOBAL | BIT_TIMER2);

	/* Configura el Timer0 */
   /* rTCNTB2 = 65535;
    rTCMPB2 = 12800;*/

    /* manual update */
	/*rTCON |= (0x2 << 12);*/
	/* not manual update, start and auto-reload*/
   /* rTCON  = (rTCON & ~(0xf << 12)) | (0x9 << 12);*/
	/* Se borra el bit de interrupción pendiente del TIMER2 */

	/*timer_stat = 1;*/

	/* Se borra el bit de interrupción pendiente del TIMER2 */
  /*  rI_ISPC  = BIT_TIMER2;*/
	/* Desenmascara la linea del timer 2 y el bit global */
	/*rINTMSK &= ~(BIT_GLOBAL|BIT_TIMER2);*/
}

void timer_stop(void)
{
    rTCON   &= ~(0x1 << 12);
	rINTMSK |= BIT_TIMER2;
	timer_stat = 0;
}

void timer_switch(void) {
	if (timer_stat) {
		timer_stop();
	} else {
		timer_start();
	}
}

void timer_clear(void) {
	timer_stop();
	symbol = 0;
	D8Led_digit(symbol); 		     
}

void timer_init(void)
{
	/* Establece la rutina de servicio para TIMER2 */
	pISR_TIMER2=(unsigned)timer_ISR;

   /* f = MCLK / ((P+1) * D)
    * para una interrupción cada 2 segundos: 1/f * 1 <= 2 <= 1/f * 65535 
    * 1/2 <= f <= 65535/2   Con 65535/2 tenemos la mayor precisión =>
    * 65535 / 2 = MCLK / ((P + 1)*D) => P = (2*MCLK / (D*65535)) - 1
    * para MCLK=64MHz y D = 8 sale P = 122,07 -> 122, que cabe en los 8 bits de pre-escalado 
    */
	/* divisor 1/8 */
    rTCFG1 = (rTCFG1 & ~(0xf << 8)) | (0x2 << 8);
	/* pre-escalado */
    rTCFG0 |= (( 2 * MCLK / (8 * 65535) - 1) & 0xff) << 8;
	
	/* timer stopped and not loading and one-shot*/
	rTCON  &= ~(0xf << 12);

	timer_start();
}

